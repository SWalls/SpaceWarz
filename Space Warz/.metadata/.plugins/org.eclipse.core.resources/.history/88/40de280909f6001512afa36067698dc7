
import java.util.*;
import java.lang.*;
import java.io.*;

public class Test
{
	
	public static enum ListOrder { RANDOM, ASCENDING, DESCENDING };
	
	public static enum Algorithm { 
		QUICK_SORT_MIDDLE("Quick Sort (Pivot = middle)"),
		QUICK_SORT_RANDOM("Quick Sort (Pivot = random)"),
		QUICK_SORT_MEDIAN("Quick Sort (Pivot = median)"),
		MERGE_SORT("Merge Sort"),
		MERGE_SORT_THRESHOLD("Merge Sort w/Threshold"),
		INSERTION_SORT("Insertion Sort"),
		SELECTION_SORT("Selection Sort"),
		EXCHANGE_SORT("Exchange Sort");
		
	    private final String name;
	    private Algorithm(String s) { name = s; }
	    public String toString() { return this.name; }
	}
	
	public static void main (String[] args) throws java.lang.Exception
	{
		int minPower = 10;
		int maxPower = 20;
		for(ListOrder order : ListOrder.values()) {
			switch(order) {
			case RANDOM: System.out.println("\nLists in Random order."); break;
			case ASCENDING: System.out.println("\nLists in Sorted (Ascending) order."); break;
			case DESCENDING: System.out.println("\nLists in Sorted (Descending) order."); break;
			}
			for(Algorithm algorithm : Algorithm.values()) {
				System.out.println("\n"+algorithm.toString());
				System.out.println("List Size, Avg Comparisons, Avg Swaps, Avg Time (ms), Trials");
				for(int i=minPower; i<=maxPower; i+=1)
					testSort(i, 100, order, algorithm);
			}
		}
	}
	
	public static void testSort(int listSizePower, int iterations, 
			ListOrder generateOrder, Algorithm algorithm)
	{
		long avgComparisons = 0;
		long avgSwaps = 0;
		double avgTime = 0;
		
		int listSize = Double.valueOf(Math.pow(2, listSizePower)).intValue();
		
		if(algorithm == Algorithm.EXCHANGE_SORT || algorithm == Algorithm.INSERTION_SORT ||
				algorithm == Algorithm.SELECTION_SORT) {
			if(listSizePower >= 18)
				return;
			if(listSizePower >= 10) {
				iterations = (listSizePower < 15 ? (-1*listSizePower*listSizePower)+200 : 1);
			}
		}
		
		for(int i=0; i<iterations; i++) {
			
			int[] list;
			switch(generateOrder) {
			case ASCENDING: list = generateOrderedAscList(listSize); break;
			case DESCENDING: list = generateOrderedDescList(listSize); break;
			default: list = generateRandomList(listSize); break;
			}
			
			Sort.prepMeasurements();
			
			int[] sorted;
			switch(algorithm) {
			case QUICK_SORT_MIDDLE: sorted = new Sort.QuickSort(list, false).sort(); break;
			case QUICK_SORT_MEDIAN: sorted = new Sort.QuickSort(list, true).sort(); break;
			case MERGE_SORT: sorted = Sort.mergeSort(list, 1); break;
			case MERGE_SORT_THRESHOLD: sorted = Sort.mergeSort(list, 8); break;
			case INSERTION_SORT: sorted = Sort.insertionSort(list); break;
			case SELECTION_SORT: sorted = Sort.selectionSort(list); break;
			case EXCHANGE_SORT: sorted = Sort.exchangeSort(list); break;
			default: sorted = Sort.exchangeSort(list); break;
			}
			
			Sort.gatherMeasurements();
			
			avgComparisons += Sort.comparisons;
			avgSwaps += Sort.swaps;
			avgTime += Sort.elapsedTime;
			
			// Check if the list is truly sorted.
			if(!Sort.isSortedAsc(sorted)) {
				System.out.println(algorithm+" failed! Terminating.");
				break;
			}
			
		}
		
		avgComparisons /= iterations;
		avgSwaps /= iterations;
		avgTime /= iterations;
		
		System.out.println(listSize+", "+avgComparisons+
			", "+avgSwaps+", "+avgTime+", "+iterations+"");
	}
	
	public static void printList(int[] list, int low, int high)
	{
		System.out.print("[");
		for(int i=low; i<high; i++) {
			System.out.print(list[i]+(i == high-1 ? "" : ", "));
		}
		System.out.println("]");
	}
	
	public static int[] generateRandomList(int size)
	{
		if(size < 1)
			return null;
		int[] list = new int[size];
		Random rand = new Random();
		int  r = rand.nextInt(500000) + 1; // between 1 and 500,000
		for(int i=0; i<size; i++) {
			list[i] = r;
			r = rand.nextInt(500000) + 1;
		}
		return list;
	}
	
	public static int[] generateOrderedAscList(int size)
	{
		if(size < 1)
			return null;
		int[] list = new int[size];
		for(int i=0; i<size; i++) {
			list[i] = i;
		}
		return list;
	}
	
	public static int[] generateOrderedDescList(int size)
	{
		if(size < 1)
			return null;
		int[] list = new int[size];
		for(int i=0; i<size; i++) {
			list[i] = size-i;
		}
		return list;
	}
}
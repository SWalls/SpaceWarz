import java.util.Random;

public class QuickSort {

	private int[] list;
	private boolean pickMedian = true;
	private Random rand;
	
	public QuickSort(int[] list, boolean pickMedian) {
		this.list = list;
		this.pickMedian = pickMedian;
		rand = new Random();
	}
	
	public int[] sort()
	{
		sort(0, list.length);
		return list;
	}
	
	private void sort(int low, int high)
	{
		if(high > low && high - low > 1) {
			int pivotIdx = partition(low, high);
			sort(low, pivotIdx);
			sort(pivotIdx+1, high);
			System.out.println(pivotIdx);
		}
	}
	
	private int partition(int low, int high)
	{
		int pivotIdx = (pickMedian ? pickMedianIdx(low, high) : low);
		int pivotItem = list[pivotIdx];
		int j = pivotIdx;
		for(int i=pivotIdx-1; i>=low; i--) {
			Sort.comparisons++;
			if(list[i] > pivotItem) {
				j--;
				if(j != i) {
					// swap
					int temp = list[j];
					list[j] = list[i];
					list[i] = temp;
					Sort.swaps++;
				}
			}
		}
		list[pivotIdx] = list[j];
		list[j] = pivotItem;
		pivotIdx = j;
		for(int i=pivotIdx+1; i<high; i++) {
			Sort.comparisons++;
			if(list[i] < pivotItem) {
				j++;
				if(j != i) {
					// swap
					int temp = list[j];
					list[j] = list[i];
					list[i] = temp;
					Sort.swaps++;
				}
			}
		}
		list[pivotIdx] = list[j];
		list[j] = pivotItem;
		return j;
	}
	
	private int pickMedianIdx(int low, int high)
	{
		if(high-low < 5) {
			return (low+high)/2;
		}
		int[] picked = {-1,-1,-1};
		int r = rand.nextInt((high-2 - low-1) + 1) + low+1; // between low+1 and high-2
		picked[0] = r;
		picked[1] = low;
		picked[2] = high-1;
		System.out.println("Low: "+low+", Rand: "+r+", High: "+(high-1));
		System.out.println("Low: "+list[low]+", Rand: "+list[r]+", High: "+list[(high-1)]);
		// find median
		int median = picked[0];
		if(list[picked[0]] < list[picked[1]]) {
			if(list[picked[0]] >= list[picked[2]]) {
				median = picked[0];
				Sort.comparisons+=2;
			} else if(list[picked[1]] < list[picked[2]]) {
				median = picked[1];
				Sort.comparisons+=3;
			} else {
				median = picked[2];
				Sort.comparisons+=3;
			}
		} else {
			if(list[picked[0]] < list[picked[2]]) {
				median = picked[0];
				Sort.comparisons+=2;
			} else if(list[picked[1]] >= list[picked[2]]) {
				median = picked[1];
				Sort.comparisons+=3;
			} else {
				median = picked[2];
				Sort.comparisons+=3;
			}
		}
		System.out.println("Selected median "+list[median]+" from ("+
				list[picked[0]]+", "+list[picked[1]]+", "+list[picked[2]]+")");
		return median;
	}
	
}
